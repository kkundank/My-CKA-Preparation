

------------------------------------------
CLI Generator commands... (ALWAYS USE THIS INSTEAD OF USING YAML MANIFEST EVERYTIME)

# It will create a Pod
kubectl run nginx --image=nginx --generator=run-pod/v1 

# See the yaml definitions
kubectl run nginx --image=nginx --generator=run-pod/v1 --dry-run -o yaml

# It will create a deployment
kubectl run --generator=deployment/v1beta1 nginx --image=nginx --dry-run -o yaml

kubectl run --generator=deployment/v1beta1 nginx --image=nginx --dry-run --replicas=4 -o yaml

OR USING CREATE

kubectl create deployment --image=nginx nginx --dry-run -o yaml
# kubectl create deployment does not have a --replicas option. 
# You could first create it and then scale it using the kubectl scale command.

# Saving this to a file
kubectl run --generator=deployment/v1beta1 nginx --image=nginx --dry-run --replicas=4 -o yaml > nginx-deployment.yaml

# Create a Service
kubectl expose pod redis --port=6379 --name redis-service --dry-run -o yaml

kubectl create service clusterip redis --tcp=6379:6379 --dry-run -o yaml
(This will not use the pods labels as selectors, instead it will assume 
 selectors as app=redis. You cannot pass in selectors as an option. 
 So it does not work very well if your pod has a different label set. 
 So generate the file and modify the selectors before creating the service)
 
(Both the above commands have their own challenges. While one of it cannot accept
a selector the other cannot accept a node port. I would recommend going with the
`kubectl expose` command. If you need to specify a node port, generate a definition
file using the same command and manually input the nodeport before creating the service).

# DIfferent Generator Values...
https://kubernetes.io/docs/reference/kubectl/conventions/
