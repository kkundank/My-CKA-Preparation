# Rolling update & Roll back

kubectl create -f deployment.yaml

kubectl run deployment --image=nginx

# To update
kubectl apply -f deplyment.yaml
kubectl set image deployment/name container_name=nginx:1.3
kubectl edit deployment name

#Rolling update
kubectl rollout status deployment/name
kubectl rollout history deployment/name

#Rollback
kubectl rollout undo deployment/name

---------------------------------------------------------------

# Commands and Arguments
------------------------

# Start container with different command & ARGS
kubectl run nginx --image=nginx --command -- <cmd> <arg1> ... <argN> // Custom command & Args

kubectl run nginx --image=nginx -- <arg1> <arg2> ... <argN> // Custom args

# Environment Variables...

# ConfigMaps..
------------
-> Imperative Way:
kubectl create configmap name --from-literal=key=value \
--from-literal=key1=value1

kubectl create configmap name --from-file=name.properties

-> Declarative Way:
kubectl create -f configmap.yaml
kind:ConfigMap

# Secrets...
----------

-> Imerative way
kubectl create secret generic name --from-literal=key=value

kubectl create secret generic name --from-file=key1=value1

-> Declarative Way
kind:Secret

echo - n "password" | base64  // Feed this is secret file

echo -n "Encoded_password" | base64 --decode

kubectl create -f secret.yaml

# Injecting in pod:

envFrom:
  - secretRef:
      name:
      
      
env:
- name:
  valueFrom:
    secretRef:
      name:
      key:


# Multi Container Pod Design...

kubectl exec -it pod_name cat /log/app.log

kubectl logs pod_name 


# Init Containers...

Example:

-> SIngle Init Container:

apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: busybox:1.28
    command: ['sh', '-c', 'echo The app is running! && sleep 3600']
  initContainers:
  - name: init-myservice
    image: busybox
    command: ['sh', '-c', 'git clone <some-repository-that-will-be-used-by-application> ; done;']
    
-> Multiple Init COntainer:

apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: busybox:1.28
    command: ['sh', '-c', 'echo The app is running! && sleep 3600']
  initContainers:
  - name: init-myservice
    image: busybox:1.28
    command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']
  - name: init-mydb
    image: busybox:1.28
    command: ['sh', '-c', 'until nslookup mydb; do echo waiting for mydb; sleep 2; done;']


Read more about initContainers here. And try out the upcoming practice test.

https://kubernetes.io/docs/concepts/workloads/pods/init-containers/




