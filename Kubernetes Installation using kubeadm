################################################ --Lab Environment Setup-- ##########################################################

Steps Need to be performed on all the Nodes (Master & Worker):

    1. Create 3 Ubuntu VMs 16.04.5 or 18.04.1.0 on any cloud provider of your choice.
        a. 1 Master node  [2vCPU, 2GB RAM, 100GB Disk space ]
        b. 2 Worker nodes [Same configuration as master.....]
        
    2. Have Static IPs set on individual VMs.
    
    3. Edit /etc/hostname and edit hostname to match the host of your choice.
    
    4. Edit/etc/hosts to add hostname and IP addresses on all Nodes (Hosts file includes name to IP mappings for VMs).
    
    5. Make sure Swap is disabled on all nodes.
        a. Turn off/Disable swap using commnad 
            # Command: swapoff -a
        b. Remove any entry for swap partitions (by commenting that line)
            # Command: vi /etc/fstab
            
    6. Take snapshots prior to installations, this way you can install 
       and revert to snapshot if needed
       
    7. Install open ssh server if not available.
            # Command: sudo apt-get install openssh-server
            
    8. Install curl and apt-transport-http utilities
            # Command: apt-get update && apt-get install -y apt-transport-https curl
    
    9. Add Google's apt repository gpg key to our local repository list.
            # Command: curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
    
    10. Add the Kubernetes apt repository to our local repository list.
            # Command: sudo bash -c 'cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
                       deb https://apt.kubernetes.io/ kubernetes-xenial main
                       EOF'
    11. After adding above two commands, time to update the package list.
            # Command: sudo apt-get update
       ~ You can also check/inspect versions available in the repository.
            # Command: apt-cache policy kubelet | head -n 20 
            # Command: apt-cache policy docker.io | head -n 20
            
    12. Install the required packages docker, kubeadm, kubelet, kubectl (If needed specify a specific version).
            # Command: sudo apt-get install -y docker.io kubelet kubeadm kubectl
        ~ Then we will set all these packages on hold, not to be updated by apt
            # Command: sudo apt-mark hold docker.io kubelet kubeadm kubectl 
            
    13. You can check the status of our kubelet and our container runtime, docker.
        ~ The kubelet will enter a crashloop until it's joined. 
            # Command1: sudo systemctl status kubelet.service 
            # Command2: sudo systemctl status docker.service 
     
    14. Ensure both are set to start when the system starts up.
            # Command1: sudo systemctl enable kubelet.service
            # Command2: sudo systemctl enable docker.service
            
Bootstrapping the Master Node with Kubeadm (Run beow commands only on Master):
        ~ [Default Process involved (Customizable)]: 
                        kubeadm init, Pre-flight checks, creates a CA(For AUthentication & Encryption),
                        Generate kube config files, Generate static pod manifests, Start up the control plane,
                        Taints the Master(Only system Pods not user's pod), Generate Bootstrap Token

    1. 

