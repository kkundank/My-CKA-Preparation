################################################ --Lab Environment Setup-- ##########################################################

---> Steps Need to be performed on all the Nodes (Master & Worker):

#    1. Create 3 Ubuntu VMs 16.04.5 or 18.04.1.0 on any cloud provider of your choice.
        a. 1 Master node  [2vCPU, 2GB RAM, 100GB Disk space ]
        b. 2 Worker nodes [Same configuration as master.....]
        
#    2. Have Static IPs set on individual VMs.
    
    3. Edit /etc/hostname and edit hostname to match the host of your choice.
    
    4. Edit /etc/hosts to add hostname and IP addresses on all Nodes (Hosts file includes name to IP mappings for VMs).
    
    5. Make sure Swap is disabled on all nodes.
        a. Turn off/Disable swap using commnad 
#Command: swapoff -a
        b. Remove any entry for swap partitions (by commenting that line)
#Command: vi /etc/fstab
            
    6. Take snapshots prior to installations, this way you can install 
       and revert to snapshot if needed
       
    7. Install open ssh server if not available.
#Command: sudo apt-get install openssh-server
            
    8. Install curl and apt-transport-http utilities
#Command: apt-get update && apt-get install -y apt-transport-https curl
    
    9. Add Google's apt repository gpg key to our local repository list.
#Command: curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
    
    10. Add the Kubernetes apt repository to our local repository list.
#Command: 
sudo bash -c 'cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF'

    11. After adding above two commands, time to update the package list.
#Command: sudo apt-get update

       ~ You can also check/inspect versions available in the repository.
#Command: apt-cache policy kubelet | head -n 20 
#Command: apt-cache policy docker.io | head -n 20
            
    12. Install the required packages docker, kubeadm, kubelet, kubectl (If needed specify a specific version).
#Command: sudo apt-get install -y docker.io kubelet kubeadm kubectl
~ Then we will set all these packages on hold, not to be updated by apt
#Command: sudo apt-mark hold docker.io kubelet kubeadm kubectl 
            
    13. You can check the status of our kubelet and our container runtime, docker.
~ The kubelet will enter a crashloop until it's joined. 
#Command1: sudo systemctl status kubelet.service 
#Command2: sudo systemctl status docker.service 
     
    14. Ensure both are set to start when the system starts up.
#Command1: sudo systemctl enable kubelet.service
#Command2: sudo systemctl enable docker.service
---------------------------------------------------------------------------------------------------------------------------------------            
            
----> Bootstrapping the Master Node with Kubeadm (Run beow commands only on Master):
        ~ [Default Process involved (Customizable)]: 
                        kubeadm init, Pre-flight checks, creates a CA(For AUthentication & Encryption),
                        Generate kube config files, Generate static pod manifests, Start up the control plane,
                        Taints the Master(Only system Pods not user's pod), Generate Bootstrap Token

    15. Download the yaml files for the pod network (Calico in my case).
#Command1: wget https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml
#Comamnd2: wget https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml
            
    16. Run kubeadm init
#Command:kubeadm init --pod-network-cidr=192.168.0.0/16
            
    17. Configure our account on the master to have admin access to the API server from a non-privileged account.
#Command:
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
         
    18. Download yaml files for your pod network.
#Command1: kubectl apply -f rbac-kdd.yaml
#Command2: kubectl apply -f calico.yaml
            
    19. Look for the all the system pods and calico pod to change to Running. The DNS pod won't start until the Pod network is deployed and Running.
#Command: kubectl get pods --all-namespaces
~ Gives you output over time, rather than repainting the screen on each iteration.
#Command: kubectl get pods --all-namespaces --watch

    20. Get a list of our current nodes, just the master.
#Command: kubectl get nodes

    21. Check out the systemd unit, and examine 10-kubeadm.conf, Remeber the kubelet starts static pod manifests, and thus the core cluster pods.
#Command1: sudo systemctl status kubelet.service
#Command2: ls /etc/kubernetes [kubeconfig files]
#Command3: ls /etc/kubernetes/manifests [manifests files on the master]
#Command4: sudo more /etc/kubernetes/manifests/etcd.yaml
#Command5: sudo more /etc/kubernetes/manifests/kube-apiserver.yaml
----------------------------------------------------------------------------------------------------------------------------------------            
            
---> Adding a Worker node to Master node on our cluster:
        ~ [Default Process involved (TLS Bootstrapping)]:
                        kubeadm join, Download cluster information, Node submits a CSR request, CA signs the CSR automatically,
                        configures kubelet.conf
                        
Note: Skip Step1, Step2, Step3, STep4 if you have kept the output of kube init on master node.  

    1. If you didn't keep the output, on the master, you can get the token by using this command
#Command: kubeadm token list

    2. If you need to generate a new token, perhaps the old one timed out/expired.
#Command: kubeadm token create

    3. On the master, you can find the ca cert hash.
#Command: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
 
    4. Using the master (API Server) IP address or name, the token and the cert hash, let's join this Node to our cluster.
#Command: 
sudo kubeadm join ip_of_master:6443 \
    --token #Provide_your_Token \
    --discovery-token-ca-cert-hash #Provide_the_ca_hash_key
   
   
   
   
